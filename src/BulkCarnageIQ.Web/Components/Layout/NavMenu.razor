@implements IDisposable

@inject NavigationManager NavigationManager

<MudNavMenu Class="mud-width-300">
    
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">
        Home
    </MudNavLink>

    <MudNavLink Href="/MealTracker" Icon="@Icons.Material.Filled.Assignment">
        Meal Report
    </MudNavLink>

    <MudNavLink Href="/MealTrackerReport" Icon="@Icons.Material.Filled.ShowChart">
        Meal Report
    </MudNavLink>

    <MudNavLink Href="/MealTrackerTopFoods" Icon="@Icons.Material.Filled.BarChart">
        Top Foods
    </MudNavLink>

    <MudNavLink Href="/MealTrackerTopGroupNames" Icon="@Icons.Material.Filled.GroupWork">
        Top Groups
    </MudNavLink>

    <MudNavLink Href="/MealTrackerReportMacro" Icon="@Icons.Material.Filled.PieChart">
        Report Macro
    </MudNavLink>

    <MudNavLink Href="/GroceryList" Icon="@Icons.Material.Filled.ShoppingBasket">
        Grocery List
    </MudNavLink>

    <MudNavLink Href="/FoodList" Icon="@Icons.Material.Filled.List">
        Food List
    </MudNavLink>

    <MudNavLink Href="/UserProfile" Icon="@Icons.Material.Filled.Person">
        Profile
    </MudNavLink>

    <MudNavLink Href="/WeightTracker" Icon="@Icons.Material.Filled.FitnessCenter">
        Weight
    </MudNavLink>

</MudNavMenu>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
