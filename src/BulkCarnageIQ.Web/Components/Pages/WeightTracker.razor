@page "/WeightTracker"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IWeightLogService WeightService
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthStateProvider

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
    <MudText Typo="Typo.h3" Class="mb-3 d-flex align-items-center">
        <MudIcon Icon="@Icons.Material.Filled.MonitorWeight" Color="Color.Primary" Class="me-2" />
        Weight Tracker
    </MudText>

    <EditForm Model="@weightEntry" OnValidSubmit="SaveWeight">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudDatePicker Date="@PickerDate" DateChanged="OnDateChanged" Label="Date" Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6">
                <MudNumericField @bind-Value="weightEntry.WeightLbs"
                                 Label="Weight (lbs)"
                                 Required="true"
                                 Immediate="true"
                                 Max="1500"
                                 Min="0"
                                 Adornment="Adornment.End"
                                 AdornmentText="lbs" />
            </MudItem>
        </MudGrid>

        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mt-4">
            Save
        </MudButton>
    </EditForm>
</MudPaper>

@if (weightLogs.Any())
{
    <MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
        <MudText Typo="Typo.h6" Class="mb-3 d-flex align-items-center">
            <MudIcon Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" Class="me-2" />
            Weight Over Time
        </MudText>

        <BulkCarnageIQ.Web.Components.Charts.LineChart Title="Weight Over Time"
                                                       Labels="@weightLogs.Select(w => w.Date.ToShortDateString()).ToList()"
                                                       Data="@weightLogs.Select(w => w.WeightLbs).ToList()"
                                                       DataLabel="Weight (lbs)"
                                                       LineColor="rgba(217, 35, 15, 1)"
                                                       xLabel="Date"
                                                       yLabel="Weight (lbs)" />
    </MudPaper>

    <MudPaper Class="pa-4" Elevation="1" Rounded="true">
        <MudText Typo="Typo.subtitle1" Class="mb-2">Past Weights</MudText>

        <MudTable Items="weightLogs.OrderByDescending(w => w.Date)" Striped="true">
            <HeaderContent>
                <MudTh>Date</MudTh>
                <MudTh>Weight (lbs)</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Date.ToShortDateString()</MudTd>
                <MudTd>@context.WeightLbs.ToString("N2")</MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {
    private List<WeightLog> weightLogs = new();
    private WeightLog weightEntry = new WeightLog() { Date = DateOnly.FromDateTime(DateTime.Today) };

    protected override async Task OnInitializedAsync()
    {
        var userId = await GetUserIdAsync();

        weightLogs = await WeightService.GetUserLogsAsync(userId, true);

        // Pre-fill today's weight if exists
        var todayLog = weightLogs.FirstOrDefault(w => w.Date == DateOnly.FromDateTime(DateTime.Today));
        if (todayLog != null)
        {
            weightEntry.WeightLbs = todayLog.WeightLbs;
        }
    }

    private async Task SaveWeight()
    {
        var userId = await GetUserIdAsync();
        await WeightService.AddOrUpdateLogAsync(userId, weightEntry.Date, weightEntry.WeightLbs);
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private async Task<string> GetUserIdAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;
        return userId!;
    }

    private DateTime? PickerDate
    {
        get => weightEntry.Date.ToDateTime(TimeOnly.MinValue);
        set
        {
            if (value.HasValue)
            {
                weightEntry.Date = DateOnly.FromDateTime(value.Value);
            }
        }
    }

    private void OnDateChanged(DateTime? newDate)
    {
        if (newDate.HasValue)
        {
            weightEntry.Date = DateOnly.FromDateTime(newDate.Value);
        }
    }
}
