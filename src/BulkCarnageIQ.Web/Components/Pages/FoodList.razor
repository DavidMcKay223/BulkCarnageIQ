@page "/FoodList"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Carnage.Report
@using BulkCarnageIQ.Core.Contracts
@inject IFoodItemService FoodItemService

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudText Typo="Typo.h3" Class="d-flex align-items-center">
    <MudIcon Icon="@Icons.Material.Filled.Egg" Class="me-2" />
    Food Items
</MudText>

<MudPaper Class="mb-4" Elevation="1" Rounded="true" Style="padding:16px;">
    <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-3 d-flex align-items-center">
        <MudIcon Icon="@Icons.Material.Filled.Sort" Class="me-2" /> Filters
    </MudText>

    <MudGrid Class="mb-3" GutterSize="3">
        <MudItem xs="12" sm="4">
            <MudSelect T="string" Label="Recipe Name" @bind-Value="filter.SelectedRecipeName" Variant="Variant.Outlined" Dense="true" Clearable="true">
                @foreach (var recipe in recipeNames)
                {
                    <MudSelectItem Value="@recipe">@recipe</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudSelect T="string" Label="Group Name" @bind-Value="filter.SelectedGroupName" Variant="Variant.Outlined" Dense="true" Clearable="true">
                @foreach (var group in groupNames)
                {
                    <MudSelectItem Value="@group">@group</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" sm="4">
            <MudSelect T="string" Label="Brand Type" @bind-Value="filter.SelectedBrandType" Variant="Variant.Outlined" Dense="true" Clearable="true">
                @foreach (var brand in brandTypes)
                {
                    <MudSelectItem Value="@brand">@brand</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>

    <MudGrid GutterSize="2" Class="mb-3">
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="High Protein" @bind-value="filter.IsHighProtein" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Low Carb" @bind-value="filter.IsLowCarb" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Keto" @bind-value="filter.IsKeto" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Bulk Meal" @bind-value="filter.IsBulkMeal" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="High Carb" @bind-value="filter.IsHighCarb" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Low Fiber" @bind-value="filter.IsLowFiber" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="High Fat" @bind-value="filter.IsHighFat" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Balanced Meal" @bind-value="filter.IsBalancedMeal" />
        </MudItem>
        <MudItem xs="6" sm="3" md="2">
            <MudCheckBox Label="Low Protein" @bind-value="filter.IsLowProtein" />
        </MudItem>
    </MudGrid>

    <MudButton Variant="Variant.Outlined" Color="Color.Success" Size="Size.Small" StartIcon="@Icons.Material.Filled.Circle" OnClick="ClearFilters">
        Reset Filters
    </MudButton>
</MudPaper>

@if (foodItems == null)
{
    <MudPaper Class="p-4 d-flex align-items-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
        <MudText Typo="Typo.subtitle1" Class="text-muted">Loading food...</MudText>
    </MudPaper>
}
else if (!foodItems.Any())
{
    <MudPaper Class="p-4">
        <MudText Typo="Typo.subtitle1" Class="text-warning">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" />
            No food items found.
        </MudText>
    </MudPaper>
}
else
{
    var filteredItems = filter.ApplyFilters(foodItems);
    var groupedItems = filteredItems.GroupBy(item => item.GroupName ?? "Ungrouped");

    @foreach (var group in groupedItems)
    {
        <MudPaper Class="mb-4" Elevation="3" Rounded="true" Style="border:none;">
            <MudPaper Class="mud-theme-primary mud-text-white mud-rounded-top px-3 py-2" Elevation="0" Square="true">
                <MudText Typo="Typo.h6" Class="mb-0 d-flex align-items-center">
                    <MudIcon Icon="@Icons.Material.Filled.Collections" Class="me-2" /> @group.Key
                </MudText>
            </MudPaper>
            <MudGrid GutterSize="3" Class="p-3">
                @foreach (var item in group)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="h-100">
                            @if (!string.IsNullOrEmpty(item.PictureLink))
                            {
                                <MudCardMedia Image="@item.PictureLink" Alt="@item.RecipeName" Height="200" Style="object-fit: contain;" />
                            }
                            else
                            {
                                <MudCardMedia Image="photos/FoodItemPlaceHolder.jpg" Alt="@item.RecipeName" Height="200" Style="object-fit: contain;" />
                            }

                            <MudCardContent Class="d-flex flex-column">
                                <MudText Typo="Typo.h6" Class="d-flex justify-content-between align-items-center">
                                    @item.RecipeName
                                    <MudBadge Color="Color.Secondary" Variant="Variant.Filled">@item.BrandType</MudBadge>
                                </MudText>

                                <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                                    @item.Servings x @item.MeasurementServings @item.MeasurementType
                                </MudText>

                                <div class="mb-2">
                                    @if (item.IsBreakfast)
                                    {
                                        <MudChip T="string" Text="Breakfast" Color="Color.Warning" TextColor="Color.Dark" Icon="@Icons.Material.Filled.WbSunny" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsLunch)
                                    {
                                        <MudChip T="string" Text="Lunch" Color="Color.Success" Icon="@Icons.Material.Filled.LunchDining" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsDinner)
                                    {
                                        <MudChip T="string" Text="Dinner" Color="Color.Dark" Icon="@Icons.Material.Filled.NightsStay" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsSnack)
                                    {
                                        <MudChip T="string" Text="Snack" Color="Color.Info" TextColor="Color.Dark" Icon="@Icons.Material.Filled.Coffee" Class="me-1" Size="Size.Small" />
                                    }
                                </div>

                                <div class="mb-2">
                                    @if (item.IsHighProtein)
                                    {
                                        <MudChip T="string" Text="High Protein" Color="Color.Success" Icon="@Icons.Material.Filled.Whatshot" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsLowCarb)
                                    {
                                        <MudChip T="string" Text="Low Carb" Color="Color.Info" TextColor="Color.Dark" Icon="@Icons.Material.Filled.ArrowDownward" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsKeto)
                                    {
                                        <MudChip T="string" Text="Keto" Color="Color.Warning" TextColor="Color.Dark" Icon="@Icons.Material.Filled.InvertColors" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsBulkMeal)
                                    {
                                        <MudChip T="string" Text="Bulk Meal" Color="Color.Error" Icon="@Icons.Material.Filled.ShowChart" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsHighCarb)
                                    {
                                        <MudChip T="string" Text="High Carb" Color="Color.Error" Icon="@Icons.Material.Filled.LocalCafe" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsLowFiber)
                                    {
                                        <MudChip T="string" Text="Low Fiber" Color="Color.Secondary" Icon="@Icons.Material.Filled.LocalFlorist" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsHighFat)
                                    {
                                        <MudChip T="string" Text="High Fat" Color="Color.Dark" Icon="@Icons.Material.Filled.InvertColors" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsBalancedMeal)
                                    {
                                        <MudChip T="string" Text="Balanced Meal" Color="Color.Primary" Icon="@Icons.Material.Filled.Bolt" Class="me-1" Size="Size.Small" />
                                    }
                                    @if (item.IsLowProtein)
                                    {
                                        <MudChip T="string" Text="Low Protein" Color="Color.Info" Icon="@Icons.Material.Filled.Egg" Class="me-1" Size="Size.Small" />
                                    }
                                </div>

                                <MudList T="string" Dense="true" Class="mb-3" Style="flex-grow: 1;">
                                    <MudListItem>
                                        <MudIcon T="string" Icon="@Icons.Material.Filled.Bolt" Class="me-1" /> Calories: @item.CaloriesPerServing
                                    </MudListItem>
                                    <MudListItem>
                                        <MudIcon T="string" Icon="@Icons.Material.Filled.BarChart" Class="me-1" /> Protein: @item.Protein g
                                    </MudListItem>
                                    <MudListItem>
                                        <MudIcon T="string" Icon="@Icons.Material.Filled.Coffee" Class="me-1" /> Carbs: @item.Carbs g
                                    </MudListItem>
                                    <MudListItem>
                                        <MudIcon T="string" Icon="@Icons.Material.Filled.InvertColors" Class="me-1" /> Fats: @item.Fats g
                                    </MudListItem>
                                    <MudListItem>
                                        <MudIcon T="string" Icon="@Icons.Material.Filled.LocalFlorist" Class="me-1" /> Fiber: @item.Fiber g
                                    </MudListItem>
                                </MudList>

                                @if (!string.IsNullOrEmpty(item.Link))
                                {
                                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="@item.Link" Target="_blank" StartIcon="@Icons.Material.Filled.AddBox" Class="mt-auto" Size="Size.Small">
                                        Nutrition Info
                                    </MudButton>
                                }
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
    }
}

@code {
    private List<FoodItem> foodItems;
    private List<string> recipeNames = [];
    private List<string> groupNames = [];
    private List<string> brandTypes = [];
    private FoodItemFilter filter = new FoodItemFilter();

    protected override async Task OnInitializedAsync()
    {
        // Fetch food items from service
        foodItems = await FoodItemService.GetAllAsync();

        // Get the distinct values for RecipeName, GroupName, and BrandType for the dropdowns
        recipeNames = foodItems.Select(f => f.RecipeName).Distinct().ToList();
        groupNames = foodItems.Select(f => f.GroupName ?? "Ungrouped").Distinct().ToList();
        brandTypes = foodItems.Select(f => f.BrandType).Distinct().ToList();
    }

    private void ClearFilters()
    {
        filter = new FoodItemFilter();
        StateHasChanged();
    }
}
