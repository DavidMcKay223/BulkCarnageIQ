@page "/MealTracker"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IMealEntryService MealEntryService
@inject IFoodItemService FoodItemService
@inject IGroupFoodService GroupFoodService
@inject AuthenticationStateProvider AuthProvider
@using System.Linq

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudText Typo="Typo.h3" Class="d-flex align-items-center">
    <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" Class="me-2" />
    Meal Tracker
</MudText>

<MudPaper Class="mb-4 p-4" Elevation="2">
    <EditForm Model="@newEntry" OnValidSubmit="SaveMeal">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <MudGrid GutterSize="2">
            <MudItem xs="12" sm="6" md="2">
                <MudDatePicker Date="DateBridge" Label="Date" DateChanged="OnDateChanged" Required="true" />
            </MudItem>

            <MudItem xs="12" sm="6" md="2">
                <MudSelect T="string" Label="Meal Type" @bind-Value="newEntry.MealType" Required="true">
                    <MudSelectItem Value="@("Breakfast")">Breakfast</MudSelectItem>
                    <MudSelectItem Value="@("Lunch")">Lunch</MudSelectItem>
                    <MudSelectItem Value="@("Dinner")">Dinner</MudSelectItem>
                    <MudSelectItem Value="@("Snack")">Snack</MudSelectItem>
                </MudSelect>
            </MudItem>

            <MudItem xs="12" md="6" Class="position-relative">
                <MudTextField T="string"
                Label="Meal Name"
                Placeholder="Type to search..."
                Value="newEntry.MealName"
                Immediate="true"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search"
                ValueChanged="OnMealNameChanged" />

                @if (suggestions.Any())
                {
                    <MudPaper Class="position-absolute w-100" Style="z-index:1050;">
                        <MudList T="string">
                            @foreach (var suggestion in suggestions)
                            {
                                <MudListItem Class="cursor-pointer"
                                @onclick="() => SelectSuggestion(suggestion)">
                                    @suggestion
                                </MudListItem>
                            }
                        </MudList>
                    </MudPaper>
                }
            </MudItem>

            <MudItem xs="12" md="2">
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="w-100">
                    <MudIcon Icon="@Icons.Material.Filled.AddCircle" Class="me-1" />
                    Add
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

<BulkCarnageIQ.Web.Components.Carnage.GroupMealQuickAdd OnMealsAdded="HandleGroupMealsAdded" GroupItems="groupFoodItems" />

@if (entries is null)
{
    <MudPaper Class="p-4 d-flex align-items-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
        <MudText Typo="Typo.subtitle1" Class="text-muted">Loading meals...</MudText>
    </MudPaper>
}
else if (!entries.Any())
{
    <MudPaper Class="p-4">
        <MudText Typo="Typo.subtitle1" Class="text-warning">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" />
            No meals tracked yet.
        </MudText>
    </MudPaper>
}
else
{
    @foreach (var monthGroup in entries
       .GroupBy(e => new { Year = e.Date.Year, Month = e.Date.Month })
       .OrderByDescending(g => g.Key.Year)
       .ThenByDescending(g => g.Key.Month))
    {
        <MudPaper Class="mb-4 p-3" Elevation="1" Style="background-color:#1e1e1e; color:#eee;">
            <MudText Typo="Typo.h5" Class="mb-2" Style="cursor:pointer; user-select:none;" @onclick="@(() => ToggleMonth(monthGroup.Key))">
                <MudIcon Icon="@(IsMonthExpanded(monthGroup.Key) ? Icons.Material.Filled.ExpandMore : Icons.Material.Filled.ChevronRight)" Class="me-2" />
                @(new DateTime(monthGroup.Key.Year, monthGroup.Key.Month, 1).ToString("MMMM yyyy"))
            </MudText>

            @if (IsMonthExpanded(monthGroup.Key))
            {
                foreach (var dateGroup in monthGroup.GroupBy(e => e.Date).OrderByDescending(g => g.Key))
                {
                    <MudPaper Class="ms-4 mb-4 p-2" Elevation="0" Square="true" Style="background-color:#2a2a2a;">
                        <MudText Typo="Typo.h6" Class="mb-1" Style="cursor:pointer; user-select:none;" @onclick="@(() => ToggleDate(dateGroup.Key))">
                            <MudIcon Icon="@(IsExpanded(dateGroup.Key) ? Icons.Material.Filled.ExpandMore : Icons.Material.Filled.ChevronRight)" Class="me-2" />
                            @dateGroup.Key.ToString("MMMM dd, yyyy")
                        </MudText>

                        @if (IsExpanded(dateGroup.Key))
                        {
                            foreach (var mealGroup in dateGroup.GroupBy(m => m.MealType).OrderBy(mg => GetMealTypeOrder(mg.Key)))
                            {
                                <MudPaper Class="mb-3 p-3" Elevation="2" Style="color:#f5f5f5;">
                                    <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Baseline" Class="mb-2" Spacing="1">
                                        <MudText Typo="Typo.subtitle1" StartIcon="@GetMealIcon(mealGroup.Key)">
                                            @mealGroup.Key
                                        </MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Primary" Class="text-muted" Style="white-space:nowrap;">
                                            Total: @mealGroup.Sum(m => m.Calories).ToString("N0") Cal
                                            | P: @mealGroup.Sum(m => m.Protein).ToString("N1")g
                                            | C: @mealGroup.Sum(m => m.Carbs).ToString("N1")g
                                            | F: @mealGroup.Sum(m => m.Fats).ToString("N1")g
                                        </MudText>
                                    </MudStack>

                                    <MudTable T="MealEntry" Items="mealGroup" Elevation="0" Dense="true" Bordered="true" Striped="true" Hover="true" Style="color:#ddd;">
                                        <HeaderContent>
                                            <MudTh>Meal Name</MudTh>
                                            <MudTh>Portion Eaten</MudTh>
                                            <MudTh></MudTh> @* For Calculate button *@
                                            <MudTh>Calories</MudTh>
                                            <MudTh>Protein (g)</MudTh>
                                            <MudTh>Carbs (g)</MudTh>
                                            <MudTh>Fats (g)</MudTh>
                                            <MudTh>Fiber (g)</MudTh>
                                            <MudTh></MudTh> @* For Delete button *@
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd Title="@context.MealName" Style="max-width:250px; white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                                                @context.MealName (@context.MeasurementServings x @context.MeasurementType)
                                            </MudTd>
                                            <MudTd Style="width:130px;">
                                                <MudNumericField @bind-Value="context.PortionEaten" Min="1" Variant="Variant.Outlined" Size="Size.Small" Immediate="true" Class="m-0" />
                                            </MudTd>
                                            <MudTd Style="width:40px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Calculate" Color="Color.Primary" Size="Size.Small"
                                                               OnClick="() => UpdateMealMacros(context)" />
                                            </MudTd>
                                            <MudTd Style="width:70px; text-align:right;">
                                                @context.Calories.ToString("N0")
                                            </MudTd>
                                            <MudTd Style="width:70px; text-align:right;">
                                                @context.Protein.ToString("N1")
                                            </MudTd>
                                            <MudTd Style="width:70px; text-align:right;">
                                                @context.Carbs.ToString("N1")
                                            </MudTd>
                                            <MudTd Style="width:70px; text-align:right;">
                                                @context.Fats.ToString("N1")
                                            </MudTd>
                                            <MudTd Style="width:70px; text-align:right;">
                                                @context.Fiber.ToString("N1")
                                            </MudTd>
                                            <MudTd Style="width:40px;">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small"
                                                               OnClick="() => DeleteMeal(context)" />
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudPaper>
                            }

                            <MudDivider Class="mt-3 mb-1" />
                            <MudText Typo="Typo.subtitle2" Color="Color.Info" Class="mb-1">
                                Daily Totals (@dateGroup.Key.ToString("MMMM dd"))
                            </MudText>
                            <MudText Color="Color.Primary" Style="font-weight:bold; font-size:0.95rem;">
                                Calories: @dateGroup.Sum(m => m.Calories).ToString("N0") &nbsp;
                                Protein: @dateGroup.Sum(m => m.Protein).ToString("N1")g &nbsp;
                                Carbs: @dateGroup.Sum(m => m.Carbs).ToString("N1")g &nbsp;
                                Fats: @dateGroup.Sum(m => m.Fats).ToString("N1")g &nbsp;
                                Fiber: @dateGroup.Sum(m => m.Fiber).ToString("N1")g
                            </MudText>
                        }
                    </MudPaper>
                }
            }
        </MudPaper>
    }
}

@code {
    private List<string> suggestions = new();
    private List<MealEntry>? entries;
    private List<GroupFoodItem>? groupFoodItems;
    private string currentUserId = string.Empty;
    private MealEntry newEntry;
    private HashSet<DateOnly> expandedDates = new();

    private DateTime DateBridge
    {
        get => newEntry.Date.ToDateTime(TimeOnly.MinValue);
        set => newEntry.Date = DateOnly.FromDateTime(value);
    }

    private void OnDateChanged(DateTime? newDate)
    {
        if (newDate.HasValue)
        {
            newEntry.Date = DateOnly.FromDateTime(newDate.Value);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.Identity?.Name ?? string.Empty;

        InitializeNewEntry(); // Set defaults including UserId

        if (!string.IsNullOrEmpty(currentUserId))
        {
            entries = await MealEntryService.GetAllAsync(currentUserId);
            // Optionally pre-expand today's date
            var today = DateOnly.FromDateTime(DateTime.Today);
            if (entries?.Any(e => e.Date == today) == true)
            {
                expandedDates.Add(today);
            }

            ToggleMonth(new { Year = today.Year, Month = today.Month });
        }
        else
        {
            entries = new List<MealEntry>();
        }

        groupFoodItems = await GroupFoodService.GetAllAsync();
    }

    private void InitializeNewEntry(DateOnly? date = null, string? mealType = null)
    {
        var targetDate = date ?? DateOnly.FromDateTime(DateTime.Today);
        newEntry = new MealEntry
            {
                Date = targetDate,
                Day = targetDate.DayOfWeek.ToString(),
                MealType = mealType ?? "Breakfast",
                MealName = string.Empty,
                GroupName = string.Empty,
                PortionEaten = 1.0F, // Default portion
                UserId = currentUserId
            };
        suggestions.Clear();
    }

    private async Task SaveMeal()
    {
        if (string.IsNullOrWhiteSpace(newEntry.MealName) || string.IsNullOrWhiteSpace(currentUserId))
        {
            return; // Add validation message if needed
        }

        var item = await MealEntryService.GetFoodItemByNameAsync(newEntry.MealName);
        if (item is not null)
        {
            newEntry.Calories = item.CaloriesPerServing * newEntry.PortionEaten;
            newEntry.Protein = item.Protein * newEntry.PortionEaten;
            newEntry.Carbs = item.Carbs * newEntry.PortionEaten;
            newEntry.Fats = item.Fats * newEntry.PortionEaten;
            newEntry.Fiber = item.Fiber * newEntry.PortionEaten;
            newEntry.MeasurementServings = item.MeasurementServings * newEntry.PortionEaten;
            newEntry.MeasurementType = item.MeasurementType;
            newEntry.GroupName = item.GroupName;
        }
        else
        {
            // Handle case where food item details aren't found - maybe clear macros or log warning
            newEntry.Calories = 0;
            newEntry.Protein = 0;
            newEntry.Carbs = 0;
            newEntry.Fats = 0;
            newEntry.Fiber = 0;
        }

        newEntry.Day = newEntry.Date.DayOfWeek.ToString();
        newEntry.UserId = currentUserId; // Ensure UserId is set

        try
        {
            await MealEntryService.AddAsync(newEntry);

            // Keep Date and Meal Type for the next entry, reset others
            DateOnly savedDate = newEntry.Date;
            string savedMealType = newEntry.MealType;

            InitializeNewEntry(savedDate, savedMealType);

            entries = await MealEntryService.GetAllAsync(currentUserId); // Reload entries
            if (!expandedDates.Contains(savedDate)) // Expand the date if it was collapsed
            {
                expandedDates.Add(savedDate);
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving meal: {ex.Message}");
            // Show error message to user
        }
    }

    private async Task OnMealNameChanged(string e)
    {
        newEntry.MealName = e;
        var input = newEntry.MealName;

        if (input.Length >= 2)
        {
            suggestions = await MealEntryService.SearchFoodNamesAsync(input);
        }
        else
        {
            suggestions.Clear();
        }
        StateHasChanged(); // Needed to update suggestion list UI
    }

    private async Task SelectSuggestion(string selected)
    {
        newEntry.MealName = selected;
        suggestions.Clear();

        var item = await MealEntryService.GetFoodItemByNameAsync(selected);
        if (item is not null)
        {
            newEntry.PortionEaten = item.Servings;
        }
        StateHasChanged(); // Update UI with selected name and portion
    }

    private async Task UpdateMealMacros(MealEntry meal)
    {
        var item = await MealEntryService.GetFoodItemByNameAsync(meal.MealName);
        if (item is not null)
        {
            meal.Calories = item.CaloriesPerServing * meal.PortionEaten;
            meal.Protein = item.Protein * meal.PortionEaten;
            meal.Carbs = item.Carbs * meal.PortionEaten;
            meal.Fats = item.Fats * meal.PortionEaten;
            meal.Fiber = item.Fiber * meal.PortionEaten;
            meal.MeasurementServings = item.MeasurementServings * meal.PortionEaten;
            meal.MeasurementType = item.MeasurementType;
            meal.GroupName = item.GroupName;

            try
            {
                await MealEntryService.UpdateAsync(meal);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating meal: {ex.Message}");
                // Show error message to user
            }
        }
        else
        {
            // Handle case where food item details aren't found for update - maybe show warning
            Console.WriteLine($"Could not find item details for '{meal.MealName}' during update.");
        }
    }

    private async Task DeleteMeal(MealEntry mealToDelete)
    {
        // Optional: Add JS confirmation dialog here
        bool confirmed = true;

        if (confirmed && entries != null && mealToDelete.Id > 0) // Check for valid Id
        {
            try
            {
                await MealEntryService.DeleteAsync(mealToDelete.Id);
                entries.Remove(mealToDelete);
                StateHasChanged(); // Refresh UI after removal
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting meal: {ex.Message}");
                // Show error message to user
            }
        }
        else if (mealToDelete.Id <= 0)
        {
            Console.WriteLine("Error: Meal entry has invalid Id for deletion.");
        }
    }

    private void ToggleDate(DateOnly date)
    {
        if (!expandedDates.Add(date))
        {
            expandedDates.Remove(date);
        }
    }

    private bool IsExpanded(DateOnly date) => expandedDates.Contains(date);

    private HashSet<object> expandedMonths = new();

    private void ToggleMonth(object monthKey)
    {
        if (!expandedMonths.Add(monthKey))
            expandedMonths.Remove(monthKey);
    }

    private bool IsMonthExpanded(object monthKey) => expandedMonths.Contains(monthKey);

    private int GetMealTypeOrder(string mealType)
    {
        return mealType switch
        {
            "Breakfast" => 1,
            "Lunch" => 2,
            "Dinner" => 3,
            "Snack" => 4,
            _ => 5,
        };
    }

    private async Task HandleGroupMealsAdded(List<GroupFoodItemEntry> newMeals)
    {
        if (newMeals == null || !newMeals.Any() || String.IsNullOrEmpty(currentUserId))
            return;

        foreach (var meal in newMeals)
        {
            var foodItem = await FoodItemService.GetFoodItemByName(meal.RecipeName);

            if (foodItem != null)
            {
                await MealEntryService.AddAsync(new MealEntry
                    {
                        Date = newEntry.Date,
                        Day = newEntry.Date.DayOfWeek.ToString(),
                        MealType = newEntry.MealType,
                        MealName = foodItem.RecipeName,
                        PortionEaten = meal.PortionAmount,
                        Calories = foodItem.CaloriesPerServing * meal.PortionAmount,
                        Protein = foodItem.Protein * meal.PortionAmount,
                        Carbs = foodItem.Carbs * meal.PortionAmount,
                        Fats = foodItem.Fats * meal.PortionAmount,
                        Fiber = foodItem.Fiber * meal.PortionAmount,
                        MeasurementServings = foodItem.MeasurementServings * meal.PortionAmount,
                        MeasurementType = foodItem.MeasurementType,
                        GroupName = foodItem.GroupName,
                        UserId = currentUserId
                    });
            }
        }

        DateOnly savedDate = newEntry.Date;
        entries = await MealEntryService.GetAllAsync(currentUserId); // Reload entries
        if (!expandedDates.Contains(savedDate)) // Expand the date if it was collapsed
        {
            expandedDates.Add(savedDate);
        }
        StateHasChanged();
    }

    private string GetMealIcon(string mealType) => mealType switch
    {
        "Breakfast" => Icons.Material.Filled.Egg,
        "Lunch" => Icons.Material.Filled.LunchDining,
        "Dinner" => Icons.Material.Filled.DinnerDining,
        "Snack" => Icons.Material.Filled.Fastfood,
        _ => Icons.Material.Filled.Restaurant
    };
}
