@page "/GroceryList"
@rendermode InteractiveServer
@using System.Threading
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IGroceryListService GroceryListService
@inject IMealEntryService MealEntryService
@inject AuthenticationStateProvider AuthStateProvider
@inject ILogger<GroceryList> Logger

<MudText Typo="Typo.h5" Class="mb-4 d-flex align-items-center">
    <MudIcon Icon="@Icons.Material.Filled.ShoppingCart" Class="me-2" /> Grocery List
</MudText>

@if (initialLoadComplete)
{
    <MudPaper Class="mb-4 p-3">
        <MudTextField T="string" Value="newItemName"
                      Label="Search and Add Item"
                      Placeholder="Type to search..."
                      Immediate="true"
                      ValueChanged="OnMealNameChanged"
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Class="w-100" />

        @if (suggestions.Any())
        {
            <MudList T="string" Dense="true" Class="mt-2 elevation-1" Style="max-height: 200px; overflow-y: auto;">
                @foreach (var suggestion in suggestions)
                {
                    <MudListItem T="string" @onclick="() => SelectSuggestion(suggestion)">
                        @suggestion
                    </MudListItem>
                }
            </MudList>
        }
    </MudPaper>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Dense="true" Elevation="1" Class="mb-3">
            @errorMessage
        </MudAlert>
    }

    @if (!items.Any())
    {
        <MudText>No items yet.</MudText>
    }
    else
    {
        @foreach (var group in items.GroupBy(x => x.GroupName))
        {
            <MudPaper Class="mb-4 p-0">
                <MudCard Class="rounded">
                    <MudCardHeader Class="text-white" Style="background-color:#d9230f;">
                        <MudText Typo="Typo.h6" Class="m-0">@(!string.IsNullOrEmpty(group.Key) ? group.Key : "Ungrouped")</MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudGrid>
                            @foreach (var item in group)
                            {
                                <MudItem xs="12" sm="6" md="4" @key="item.Id">
                                    <MudCard Class="@GetCardClass(item)">
                                        <MudCardContent Class="d-flex justify-between align-items-center">
                                            <div>
                                                <MudCheckBox T="bool"
                                                             Class="me-2"
                                                             Value="@item.IsCompleted"
                                                             Disabled="@item.IsSaving"
                                                             ValueChanged="() => ToggleCompleted(item)" />
                                                <MudText Typo="Typo.subtitle2">@item.RecipeName</MudText>
                                                <MudText Typo="Typo.caption">@item.MeasurementServings @item.MeasurementType</MudText>
                                            </div>

                                            <div class="d-flex align-items-center">
                                                <MudIconButton Disabled="@item.IsSaving"
                                                               Color="Color.Default"
                                                               Variant="Variant.Outlined"
                                                               Icon="@(item.IsFavorite ? Icons.Material.Filled.Star : Icons.Material.Outlined.Star)"
                                                               ButtonType="ButtonType.Submit"
                                                               OnClick="() => ToggleFavorite(item)">
                                                    @if (item.IsSaving && item.LastAction == ItemAction.ToggleFavorite)
                                                    {
                                                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
                                                    }
                                                </MudIconButton>

                                                <MudIconButton Disabled="@item.IsSaving"
                                                               Color="Color.Error"
                                                               Variant="Variant.Outlined"
                                                               Icon="@Icons.Material.Filled.Delete"
                                                               ButtonType="ButtonType.Submit"
                                                               OnClick="() => Remove(item)">
                                                    @if (item.IsSaving && item.LastAction == ItemAction.Remove)
                                                    {
                                                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
                                                    }
                                                </MudIconButton>
                                            </div>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            </MudPaper>
        }
    }

    <div class="mt-4 d-flex flex-wrap gap-2">
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Success"
                   Disabled="@isGenerating"
                   ButtonType="ButtonType.Submit"
                   OnClick="GenerateFromMeals"
                   StartIcon="@Icons.Material.Filled.Autorenew">
            @if (isGenerating)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
            }
            Auto-generate from Meals
        </MudButton>

        <MudButton Variant="Variant.Outlined"
                   Color="Color.Error"
                   Disabled="@isClearing"
                   ButtonType="ButtonType.Submit"
                   OnClick="ClearCompleted"
                   StartIcon="@Icons.Material.Filled.DeleteSweep">
            @if (isClearing)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
            }
            Clear Completed
        </MudButton>
    </div>
}
else
{
    <MudPaper Class="p-4 d-flex align-items-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
        <MudText Typo="Typo.subtitle1" Class="text-muted">Loading grocery list...</MudText>
    </MudPaper>
}

@code {
    private class GroceryListItemUI : GroceryListItem
    {
        public bool IsSaving { get; set; }
        public ItemAction? LastAction { get; set; }

        public static GroceryListItemUI FromGroceryListItem(GroceryListItem item)
        {
            return new GroceryListItemUI
                {
                    Id = item.Id,
                    UserId = item.UserId,
                    RecipeName = item.RecipeName,
                    GroupName = item.GroupName,
                    MeasurementType = item.MeasurementType,
                    MeasurementServings = item.MeasurementServings,
                    IsCompleted = item.IsCompleted,
                    IsFavorite = item.IsFavorite,
                    CreatedDate = item.CreatedDate,
                    IsSaving = false,
                    LastAction = null
                };
        }
    }

    private enum ItemAction { ToggleFavorite, ToggleComplete, Remove }

    private List<GroceryListItemUI> items = new();
    private string? newItemName;
    private bool initialLoadComplete = false;
    private string userId = "";
    private List<string> suggestions = new();
    private string? errorMessage;

    private bool isAdding = false;
    private bool isGenerating = false;
    private bool isClearing = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var auth = await AuthStateProvider.GetAuthenticationStateAsync();
            userId = auth.User?.Identity?.Name ?? string.Empty;

            await LoadItems();
            initialLoadComplete = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during component initialization for user {UserId}", userId);
            errorMessage = "Failed to initialize the grocery list. Please try refreshing.";
            initialLoadComplete = true;
        }
    }

    private async Task LoadItems()
    {
        errorMessage = null;
        try
        {
            var fetchedItems = await GroceryListService.GetListForUserAsync(userId);
            items = fetchedItems.Select(GroceryListItemUI.FromGroceryListItem).ToList();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading grocery list items for user {UserId}", userId);
            errorMessage = "Failed to load items. Please try again later.";
            items = new();
        }
    }

    private async Task Add()
    {
        if (string.IsNullOrWhiteSpace(newItemName) || isAdding) return;

        isAdding = true;
        errorMessage = null;
        StateHasChanged();

        var item = await MealEntryService.GetFoodItemByNameAsync(newItemName);

        if (item == null)
        {
            errorMessage = "Item not found. Please try a different name.";
            isAdding = false;
            StateHasChanged();
            return;
        }

        var itemToAdd = new GroceryListItem
            {
                RecipeName = newItemName.Trim(),
                GroupName = item.GroupName,
                UserId = userId,
                CreatedDate = DateOnly.FromDateTime(DateTime.UtcNow),
                IsFavorite = false,
                IsCompleted = false,
                MeasurementType = item.MeasurementType,
                MeasurementServings = item.MeasurementServings * item.Servings
            };

        try
        {
            var addedItem = await GroceryListService.AddItemAsync(itemToAdd);

            if (addedItem != null)
            {
                items.Insert(0, GroceryListItemUI.FromGroceryListItem(addedItem));
                newItemName = "";
                suggestions.Clear();
            }
            else
            {
                Logger.LogWarning("AddItemAsync returned null for user {UserId}, item name {ItemName}. Reloading list as fallback.", userId, itemToAdd.RecipeName);
                await LoadItems();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding item to grocery list for user {UserId}, item name {ItemName}", userId, newItemName);
            errorMessage = "Failed to add item. Please try again.";
        }
        finally
        {
            isAdding = false;
            StateHasChanged();
        }
    }

    private void ClearSuggestions()
    {
        // Clear suggestions when focus is lost
        suggestions.Clear();
    }

    private async Task ToggleFavorite(GroceryListItemUI item)
    {
        if (item.IsSaving) return;

        item.IsSaving = true;
        item.LastAction = ItemAction.ToggleFavorite;
        StateHasChanged();

        try
        {
            item.IsFavorite = !item.IsFavorite;
            await GroceryListService.ToggleFavoriteAsync(item.Id, userId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling favorite for item {ItemId}", item.Id);
            // Revert change on error
            item.IsFavorite = !item.IsFavorite;
            errorMessage = "Failed to update favorite status. Please try again.";
        }
        finally
        {
            item.IsSaving = false;
            item.LastAction = null;
            StateHasChanged();
        }
    }

    private async Task ToggleCompleted(GroceryListItemUI item)
    {
        if (item.IsSaving) return;

        item.IsSaving = true;
        item.LastAction = ItemAction.ToggleComplete;
        StateHasChanged();

        try
        {
            item.IsCompleted = !item.IsCompleted;
            await GroceryListService.ToggleCompletedAsync(item.Id, userId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling completion for item {ItemId}", item.Id);
            // Revert change on error
            item.IsCompleted = !item.IsCompleted;
            errorMessage = "Failed to update completion status. Please try again.";
        }
        finally
        {
            item.IsSaving = false;
            item.LastAction = null;
            StateHasChanged();
        }
    }

    private async Task Remove(GroceryListItemUI item)
    {
        if (item.IsSaving) return;

        item.IsSaving = true;
        item.LastAction = ItemAction.Remove;
        StateHasChanged();

        try
        {
            await GroceryListService.RemoveItemAsync(item.Id, userId);
            items.Remove(item);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing item {ItemId} from grocery list", item.Id);
            errorMessage = "Failed to remove item. Please try again.";
        }
        finally
        {
            item.IsSaving = false;
            item.LastAction = null;
            StateHasChanged();
        }
    }

    private async Task GenerateFromMeals()
    {
        if (isGenerating) return;

        isGenerating = true;
        StateHasChanged();

        try
        {
            await GroceryListService.AutoGenerateFromRecentMealsAsync(userId);
            await LoadItems();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error generating grocery list from meals for user {UserId}", userId);
            errorMessage = "Failed to generate grocery list from meals. Please try again.";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task ClearCompleted()
    {
        if (isClearing) return;

        isClearing = true;
        StateHasChanged();

        try
        {
            var completedItems = items.Where(i => i.IsCompleted).ToList();
            foreach (var completedItem in completedItems)
            {
                await Remove(completedItem);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error clearing completed items for user {UserId}", userId);
            errorMessage = "Failed to clear completed items. Please try again.";
        }
        finally
        {
            isClearing = false;
            StateHasChanged();
        }
    }

    private async Task OnMealNameChanged(string e)
    {
        newItemName = e;
        var input = newItemName;

        if (input.Length >= 2)
        {
            suggestions = await MealEntryService.SearchFoodNamesAsync(input);
        }
        else
        {
            suggestions.Clear();
        }
        StateHasChanged();
    }

    private async Task SelectSuggestion(string suggestion)
    {
        newItemName = suggestion;
        suggestions.Clear();
        await Add();
    }

    private string GetCardClass(GroceryListItemUI item)
    {
        var classes = "h-100";
        if (item.IsCompleted) classes += " opacity-50";
        if (item.IsSaving) classes += " opacity-75";
        return classes;
    }
}
