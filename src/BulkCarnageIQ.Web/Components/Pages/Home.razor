@page "/"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Carnage.Report
@using BulkCarnageIQ.Core.Contracts
@inject IMealEntryService MealService
@inject IUserProfileService UserProfileService
@inject AuthenticationStateProvider AuthProvider

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (TodayMeals != null)
    {
        <MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
            <MudText Typo="Typo.h5" Class="mb-3 d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Color="Color.Info" Class="me-2" />
                Macros Today
            </MudText>

            <BulkCarnageIQ.Web.Components.Carnage.TodayMacroSummary TodayMeals="TodayMeals" UserProfile="UserProfile" />
        </MudPaper>
    }

    @* @if (DailyMacros != null)
    {
        <MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
            <MudText Typo="Typo.h5" Class="mb-3 d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Color="Color.Info" Class="me-2" />
                Macros Today
            </MudText>

            <BulkCarnageIQ.Web.Components.Carnage.MacroAlertPanel DailyMacros="DailyMacros" UserProfile="UserProfile" />
        </MudPaper>
    } *@

    @if (WeeklyMacros != null)
    {
        <MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
            <MudText Typo="Typo.h5" Class="mb-3 d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.Insights" Color="Color.Primary" Class="me-2" />
                Macro Heatmap This Week
            </MudText>

            <BulkCarnageIQ.Web.Components.Carnage.WeeklyMacroHeatmap WeeklyData="WeeklyMacros"
                ProteinGoal="UserProfile!.ProteinGoal"
                CarbsGoal="UserProfile!.CarbsGoal"
                FatsGoal="UserProfile!.FatGoal"
                FiberGoal="UserProfile!.FiberGoal" />
        </MudPaper>
    }

    @if (labels != null && calories != null)
    {
        <MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
            <MudText Typo="Typo.h5" Class="mb-3 d-flex align-items-center">
                <MudIcon Icon="@Icons.Material.Filled.LocalFireDepartment" Color="Color.Warning" Class="me-2" />
                Calories This Week
            </MudText>

            <BulkCarnageIQ.Web.Components.Carnage.CalorieBarChart @ref="CalorieBarChart"
                Labels="labels"
                Data="calories"
                ChartLabel="Calories Eaten" />
        </MudPaper>
    }
</MudContainer>

@code {
    private List<string>? labels;
    private List<int>? calories;
    private List<MealEntry>? TodayMeals;
    //private MacroSummary? DailyMacros;
    private Dictionary<string, MacroSummary>? WeeklyMacros;
    private UserProfile? UserProfile;

    private BulkCarnageIQ.Web.Components.Carnage.CalorieBarChart? CalorieBarChart;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;

        if (!string.IsNullOrWhiteSpace(userId))
        {
            var data = await MealService.GetCaloriesByDayAsync(userId);

            // Sort by weekday order
            string[] weekdayOrder = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
            labels = weekdayOrder.Where(day => data.ContainsKey(day)).ToList();
            calories = labels.Select(day => (int)data[day]).ToList();

            // Today Macros:
            TodayMeals = await MealService.GetByDateAsync(DateOnly.FromDateTime(DateTime.Today), userId);

            // Daily Macros:
            //DailyMacros = await MealService.GetMacroSummaryAsync(DateOnly.FromDateTime(DateTime.Today), userId);

            // Weekly Macros:
            WeeklyMacros = await MealService.GetMacroSummariesByDateRangeAsync(
                DateOnly.FromDateTime(DateTime.Today.AddDays(-6)),
                DateOnly.FromDateTime(DateTime.Today),
                userId
            );

            // Fetch UserProfile
            UserProfile = await UserProfileService.GetUserProfile(userId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (CalorieBarChart != null)
        {
            await CalorieBarChart.InitializeChart();
        }
    }
}
