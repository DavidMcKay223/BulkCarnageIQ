@page "/MealTrackerTopFoods"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IMealEntryService MealEntryService
@inject AuthenticationStateProvider AuthProvider

<MudPopoverProvider />
<MudSnackbarProvider />
<MudDialogProvider />

<MudText Typo="Typo.h3" Class="d-flex align-items-center">
    <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="me-2" />
    Top Foods by Month
</MudText>

@if (entries is null)
{
    <MudPaper Class="p-4 d-flex align-items-center">
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="me-2" />
        <MudText Typo="Typo.subtitle1" Class="text-muted">Loading meals...</MudText>
    </MudPaper>
}
else if (!entries.Any())
{
    <MudPaper Class="p-4">
        <MudText Typo="Typo.subtitle1" Class="text-warning">
            <MudIcon Icon="@Icons.Material.Filled.Info" Class="me-1" />
            No meals tracked yet.
        </MudText>
    </MudPaper>
}
else
{
    <MudExpansionPanels MultiExpansion="true" Elevation="1">
        @foreach (var monthGroup in entries
       .GroupBy(e => new { e.Date.Year, e.Date.Month })
       .OrderByDescending(g => g.Key.Year)
       .ThenByDescending(g => g.Key.Month))
        {
            var key = monthGroup.Key;
            var year = key.Year;
            var month = key.Month;
            var monthName = new DateTime(year, month, 1).ToString("MMMM yyyy");

            var foodGroups = monthGroup
            .GroupBy(m => m.MealName)
            .Select(g => new
            {
                MealName = $"{g.Key} ({g.Sum(m => m.MeasurementServings)?.ToString("N2")} x {g.First().MeasurementType})",
                GroupName = g.First().GroupName ?? "Unknown",
                TotalPortion = g.Sum(m => m.PortionEaten),
                TotalCalories = g.Sum(m => m.Calories),
                TotalProtein = g.Sum(m => m.Protein),
                TotalCarbs = g.Sum(m => m.Carbs),
                TotalFats = g.Sum(m => m.Fats),
                TotalFiber = g.Sum(m => m.Fiber)
            })
            .OrderByDescending(f => f.TotalCalories)
            .ToList();

            <MudExpansionPanel Expanded="true" Text="@monthName" Class="mb-2" ExpandIcon="@Icons.Material.Filled.ExpandMore" CollapseIcon="@Icons.Material.Filled.ExpandLess">
                <MudTable Dense="true" Bordered="true" Hover="true" Striped="true" Elevation="0" Items="@foodGroups">
                    <HeaderContent>
                        <MudTh>Group Name</MudTh>
                        <MudTh>Meal Name</MudTh>
                        <MudTh>Total Portion</MudTh>
                        <MudTh>Total Calories</MudTh>
                        <MudTh>Total Protein</MudTh>
                        <MudTh>Total Carbs</MudTh>
                        <MudTh>Total Fats</MudTh>
                        <MudTh>Total Fiber</MudTh>
                        <MudTh>Flags</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        @{
                            var caloriePerPortion = context.TotalCalories / (context.TotalPortion == 0 ? 1 : context.TotalPortion);
                            var fatToCarbRatio = context.TotalFats / (context.TotalCarbs == 0 ? 1 : context.TotalCarbs);
                            var isFatBomb = context.TotalFats > 150 && fatToCarbRatio > 1.5;
                            var isCarbBomb = context.TotalCarbs > 200 && context.TotalFiber < 10;
                            var isCalorieBomb = caloriePerPortion > 400;
                            var isFiberFail = context.TotalFiber < 5;
                            var showLowFiber = isFatBomb || isCarbBomb || isCalorieBomb;
                        }

                        <MudTd>@context.GroupName</MudTd>
                        <MudTd>@context.MealName</MudTd>
                        <MudTd>@context.TotalPortion.ToString("N2")</MudTd>
                        <MudTd>@context.TotalCalories.ToString("N2")</MudTd>
                        <MudTd>@context.TotalProtein.ToString("N2")</MudTd>
                        <MudTd>@context.TotalCarbs.ToString("N2")</MudTd>
                        <MudTd>@context.TotalFats.ToString("N2")</MudTd>
                        <MudTd>@context.TotalFiber.ToString("N2")</MudTd>
                        <MudTd>
                            @if (isFatBomb)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small" Class="me-1" Icon="@Icons.Material.Filled.WaterDrop">Fat Bomb</MudChip>
                            }
                            @if (isCarbBomb)
                            {
                                <MudChip T="string" Color="Color.Warning" Size="Size.Small" Class="me-1" Icon="@Icons.Material.Filled.ElectricBolt">Carb Bomb</MudChip>
                            }
                            @if (isCalorieBomb)
                            {
                                <MudChip T="string" Color="Color.Error" Size="Size.Small" Class="me-1" Icon="@Icons.Material.Filled.LocalFireDepartment">Calorie Bomb</MudChip>
                            }
                            @if (showLowFiber && isFiberFail)
                            {
                                <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Class="me-1" Icon="@Icons.Material.Filled.MoodBad">Low Fiber</MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudCard Class="mt-4" Style="background-color: #d9230f;">
                    <MudCardContent>
                        <MudPaper Class="d-flex flex-wrap justify-content-between align-items-center p-3" Elevation="0" Square="true">
                            <MudText Typo="Typo.h6" Class="fw-bold">Monthly Total</MudText>

                            <MudText>Portions: @monthGroup.Sum(e => e.PortionEaten).ToString("N2")</MudText>
                            <MudText>Calories: @monthGroup.Sum(e => e.Calories).ToString("N2")</MudText>
                            <MudText>Protein: @monthGroup.Sum(e => e.Protein).ToString("N2")</MudText>
                            <MudText>Carbs: @monthGroup.Sum(e => e.Carbs).ToString("N2")</MudText>
                            <MudText>Fats: @monthGroup.Sum(e => e.Fats).ToString("N2")</MudText>
                            <MudText>Fiber: @monthGroup.Sum(e => e.Fiber).ToString("N2")</MudText>
                        </MudPaper>
                    </MudCardContent>
                </MudCard>

            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

@code {
    private List<MealEntry>? entries;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;

        entries = await MealEntryService.GetAllAsync(userId!);
    }
}
