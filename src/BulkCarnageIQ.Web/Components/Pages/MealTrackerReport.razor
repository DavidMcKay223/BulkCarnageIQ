@page "/MealTrackerReport"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IMealEntryService MealEntryService
@inject IFoodItemService FoodItemService
@inject AuthenticationStateProvider AuthProvider

<h3><i class="bi bi-calendar-week"></i> Meal Tracker</h3>

@if (entries is null)
{
    <p><em>Loading meals...</em></p>
}
else if (!entries.Any())
{
    <p>No meals tracked yet.</p>
}
else
{
    <table class="table table-hover table-bordered small align-middle">
        @foreach (var dateGroup in entries.GroupBy(e => e.Date).OrderByDescending(g => g.Key))
        {
            var date = dateGroup.Key;

            <tbody class="table-group-divider">
                <tr class="table-secondary fw-bold" @onclick="@(() => ToggleDate(date))" style="cursor: pointer;">
                    <td colspan="8">
                        <i class="bi @(IsExpanded(date) ? "bi-chevron-up" : "bi-chevron-down") me-2"></i>
                        @date.ToString("MMMM dd, yyyy") (@dateGroup.First().Day)
                    </td>
                </tr>

                @if (IsExpanded(date))
                {
                    @foreach (var mealGroup in dateGroup.GroupBy(m => m.MealType))
                    {
                        <tr class="fw-bold table-info">
                            <td>@mealGroup.Key</td>
                            <th>Portion</th>
                            <th>Calories</th>
                            <th>Protein</th>
                            <th>Carbs</th>
                            <th>Fats</th>
                            <th>Fiber</th>
                            <th>Tags</th>
                        </tr>

                        @foreach (var meal in mealGroup)
                        {
                            <tr>
                                <td>@meal.MealName (@meal.MeasurementServings x @meal.MeasurementType)</td>
                                <td>@meal.PortionEaten</td>
                                <td>@meal.Calories.ToString("N2")</td>
                                <td>@meal.Protein.ToString("N2")</td>
                                <td>@meal.Carbs.ToString("N2")</td>
                                <td>@meal.Fats.ToString("N2")</td>
                                <td>@meal.Fiber.ToString("N2")</td>
                                <td>
                                    @if (meal.IsHighProtein)
                                    {
                                        <span class="badge bg-success" title="High Protein">High Protein</span>
                                    }
                                    @if (meal.IsLowCarb)
                                    {
                                        <span class="badge bg-warning" title="Low Carb">Low Carb</span>
                                    }
                                    @if (meal.IsKeto)
                                    {
                                        <span class="badge bg-dark" title="Keto">Keto</span>
                                    }
                                    @if (meal.IsBulkMeal)
                                    {
                                        <span class="badge bg-primary" title="Bulk Meal">Bulk Meal</span>
                                    }
                                    @if (meal.IsHighSugar)
                                    {
                                        <span class="badge bg-danger" title="High Sugar">High Sugar</span>
                                    }
                                    @if (meal.IsLowFiber)
                                    {
                                        <span class="badge bg-secondary" title="Low Fiber">Low Fiber</span>
                                    }
                                    @if (meal.IsHighFat)
                                    {
                                        <span class="badge bg-info" title="High Fat">High Fat</span>
                                    }
                                    @if (meal.IsLowProtein)
                                    {
                                        <span class="badge bg-light text-dark" title="Low Protein">Low Protein</span>
                                    }
                                    @if (meal.IsBalancedMeal)
                                    {
                                        <span class="badge bg-success" title="Balanced Meal">Balanced Meal</span>
                                    }
                                </td>
                            </tr>
                        }
                    }

                    <tr class="table-warning fw-bold">
                        <td colspan="2" class="text-end">Total</td>
                        <td>@dateGroup.Sum(e => e.Calories).ToString("N2")</td>
                        <td>@dateGroup.Sum(e => e.Protein).ToString("N2")</td>
                        <td>@dateGroup.Sum(e => e.Carbs).ToString("N2")</td>
                        <td>@dateGroup.Sum(e => e.Fats).ToString("N2")</td>
                        <td>@dateGroup.Sum(e => e.Fiber).ToString("N2")</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        }
    </table>
}

@code {
    private List<string> suggestions = new();
    private List<MealEntry>? entries;
    private MealEntry newEntry = new()
        {
            Date = DateOnly.FromDateTime(DateTime.Today),
            Day = DateTime.Today.DayOfWeek.ToString(),
            MealType = "Breakfast",
            MealName = string.Empty,
            UserId = string.Empty
        };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;

        entries = await MealEntryService.GetAllAsync(userId!);
    }

    private async Task SaveMeal()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;

        if (!string.IsNullOrWhiteSpace(newEntry.MealName) && !string.IsNullOrWhiteSpace(userId))
        {
            // Ensure its populated:
            var item = await MealEntryService.GetFoodItemByNameAsync(newEntry.MealName);
            if (item is not null)
            {
                newEntry.Calories = item.CaloriesPerServing * newEntry.PortionEaten;
                newEntry.Protein = item.Protein * newEntry.PortionEaten;
                newEntry.Carbs = item.Carbs * newEntry.PortionEaten;
                newEntry.Fats = item.Fats * newEntry.PortionEaten;
                newEntry.Fiber = item.Fiber * newEntry.PortionEaten;
            }

            newEntry.Day = newEntry.Date.DayOfWeek.ToString();
            newEntry.UserId = userId;
            await MealEntryService.AddAsync(newEntry);

            string mealType = newEntry.MealType;
            DateOnly dateOnly = newEntry.Date;

            newEntry = new MealEntry
                {
                    Date = dateOnly,
                    Day = dateOnly.DayOfWeek.ToString(),
                    MealName = string.Empty,
                    MealType = mealType,
                    UserId = string.Empty
                };

            entries = await MealEntryService.GetAllAsync(userId);
        }
    }

    private async Task OnMealNameChanged(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? string.Empty;

        if (input.Length >= 2) // Optional: only start searching after 2 characters
        {
            suggestions = await MealEntryService.SearchFoodNamesAsync(input);
        }
        else
        {
            suggestions.Clear();
        }
    }

    private async void SelectSuggestion(string selected)
    {
        newEntry.MealName = selected;
        suggestions.Clear();

        var item = await MealEntryService.GetFoodItemByNameAsync(selected);
        if (item is not null)
        {
            newEntry.PortionEaten = item.Servings;
        }
    }
}

@code {
    private HashSet<DateOnly> expandedDates = new();

    private void ToggleDate(DateOnly date)
    {
        if (!expandedDates.Add(date))
            expandedDates.Remove(date);
    }

    private bool IsExpanded(DateOnly date) => !expandedDates.Contains(date);
}
