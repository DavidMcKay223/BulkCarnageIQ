@page "/MealTrackerTopGroupNames"
@rendermode InteractiveServer
@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Contracts
@inject IMealEntryService MealEntryService
@inject AuthenticationStateProvider AuthProvider

<h3><i class="bi bi-bar-chart-line"></i> Top Groups by Month</h3>

@if (entries is null)
{
    <p><em>Loading meals...</em></p>
}
else if (!entries.Any())
{
    <p>No meals tracked yet.</p>
}
else
{
    <table class="table table-hover table-bordered small align-middle">
        @foreach (var monthGroup in entries
       .GroupBy(e => new { e.Date.Year, e.Date.Month })
       .OrderByDescending(g => g.Key.Year)
       .ThenByDescending(g => g.Key.Month))
        {
            var year = monthGroup.Key.Year;
            var month = monthGroup.Key.Month;
            var monthName = new DateTime(year, month, 1).ToString("MMMM yyyy");

            <tbody class="table-group-divider">
                <tr class="table-secondary fw-bold" @onclick="@(() => ToggleMonth(monthGroup.Key))" style="cursor: pointer;">
                    <td colspan="8">
                        <i class="bi @(IsExpanded(monthGroup.Key) ? "bi-chevron-up" : "bi-chevron-down") me-2"></i>
                        @monthName
                    </td>
                </tr>

                @if (IsExpanded(monthGroup.Key))
                {
                    var groupGroups = monthGroup
                    .GroupBy(m => m.GroupName ?? "Unknown")
                    .Select(g => new
                    {
                        GroupName = String.Format("{0} ({1} items)", g.Key, g.Count()),
                        TotalPortion = g.Sum(m => m.PortionEaten),
                        TotalCalories = g.Sum(m => m.Calories),
                        TotalProtein = g.Sum(m => m.Protein),
                        TotalCarbs = g.Sum(m => m.Carbs),
                        TotalFats = g.Sum(m => m.Fats),
                        TotalFiber = g.Sum(m => m.Fiber)
                    })
                    .OrderByDescending(f => f.TotalCalories)
                    .ToList();

                    <tr class="fw-bold table-info">
                        <td>Group Name</td>
                        <th>Total Portion</th>
                        <th>Total Calories</th>
                        <th>Total Protein</th>
                        <th>Total Carbs</th>
                        <th>Total Fats</th>
                        <th>Total Fiber</th>
                        <th>Flags</th>
                    </tr>

                    @foreach (var group in groupGroups)
                    {
                        var caloriePerPortion = group.TotalCalories / (group.TotalPortion == 0 ? 1 : group.TotalPortion);
                        var fatToCarbRatio = group.TotalFats / (group.TotalCarbs == 0 ? 1 : group.TotalCarbs);
                        var isFatBomb = group.TotalFats > 150 && fatToCarbRatio > 1.5;
                        var isSugarBomb = group.TotalCarbs > 200 && group.TotalFiber < 10;
                        var isCalorieBomb = caloriePerPortion > 400;
                        var isFiberFail = group.TotalFiber < 5;

                        var showLowFiber = isFatBomb || isSugarBomb || isCalorieBomb;

                        <tr>
                            <td>@group.GroupName</td>
                            <td>@group.TotalPortion.ToString("N2")</td>
                            <td>@group.TotalCalories.ToString("N2")</td>
                            <td>@group.TotalProtein.ToString("N2")</td>
                            <td>@group.TotalCarbs.ToString("N2")</td>
                            <td>@group.TotalFats.ToString("N2")</td>
                            <td>@group.TotalFiber.ToString("N2")</td>
                            <td>
                                @if (isFatBomb)
                                {
                                    <span class="badge bg-danger me-1"><i class="bi bi-droplet-fill"></i> Fat Bomb</span>
                                }
                                @if (isSugarBomb)
                                {
                                    <span class="badge bg-warning text-dark me-1"><i class="bi bi-cup-straw"></i> Sugar Bomb</span>
                                }
                                @if (isCalorieBomb)
                                {
                                    <span class="badge bg-danger me-1"><i class="bi bi-fire"></i> Calorie Bomb</span>
                                }
                                @if (showLowFiber && isFiberFail)
                                {
                                    <span class="badge bg-secondary me-1"><i class="bi bi-emoji-dizzy"></i> Low Fiber</span>
                                }
                            </td>
                        </tr>
                    }

                    <tr class="table-warning fw-bold">
                        <td class="text-end">Monthly Total</td>
                        <td>@monthGroup.Sum(e => e.PortionEaten).ToString("N2")</td>
                        <td>@monthGroup.Sum(e => e.Calories).ToString("N2")</td>
                        <td>@monthGroup.Sum(e => e.Protein).ToString("N2")</td>
                        <td>@monthGroup.Sum(e => e.Carbs).ToString("N2")</td>
                        <td>@monthGroup.Sum(e => e.Fats).ToString("N2")</td>
                        <td>@monthGroup.Sum(e => e.Fiber).ToString("N2")</td>
                        <td></td>
                    </tr>
                }
            </tbody>
        }
    </table>
}

@code {
    private List<MealEntry>? entries;
    private HashSet<(int Year, int Month)> expandedMonths = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.Identity?.Name;

        entries = await MealEntryService.GetAllAsync(userId!);
    }

    private void ToggleMonth(dynamic key)
    {
        var tupleKey = (Year: (int)key.Year, Month: (int)key.Month);

        if (!expandedMonths.Add(tupleKey))
            expandedMonths.Remove(tupleKey);
    }

    private bool IsExpanded(dynamic key)
    {
        var tupleKey = (Year: (int)key.Year, Month: (int)key.Month);
        return !expandedMonths.Contains(tupleKey);
    }
}
