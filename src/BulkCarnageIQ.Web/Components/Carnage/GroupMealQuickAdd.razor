@using BulkCarnageIQ.Core.Carnage

<MudPaper Class="pa-4 mb-4" Elevation="2" Rounded="true">
    <MudText Typo="Typo.h5" Class="mb-3 d-flex align-items-center">
        <MudIcon Icon="@Icons.Material.Filled.FlashOn" Color="Color.Warning" Class="me-2" />
        Quick Add Grouped Meals
    </MudText>

    @if (GroupItems?.Any() == true)
    {
        <MudGrid GutterSize="3">
            @foreach (var group in GroupItems)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudPaper Elevation="1" Rounded="true" Class="d-flex flex-column h-100">
                       
                        @if (!string.IsNullOrEmpty(group.PictureLink))
                        {
                            <MudCardMedia Image="@group.PictureLink" Alt="@group.GroupName" Height="200" Style="object-fit: contain;" />
                        }
                        else
                        {
                            <MudCardMedia Image="photos/FoodItemPlaceHolder.jpg" Alt="@group.GroupName" Height="200" Style="object-fit: contain;" />
                        }

                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="px-3 pt-3 mb-2">@group.GroupName</MudText>
                        
                        <MudStack Spacing="1">
                            @foreach (var entry in group.Entries)
                            {
                                <MudCheckBox T="bool"
                                    Value="@IsSelected(entry)"
                                    ValueChanged="@((bool isChecked) => ToggleSelection(entry, isChecked))"
                                    Label="@entry.RecipeName"
                                    Class="me-2" />
                            }
                        </MudStack>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>

        <MudButton Color="Color.Success" Variant="Variant.Filled" Class="mt-3" OnClick="AddSelectedItems" StartIcon="@Icons.Material.Filled.AddCircle">
            Add Selected Items (@SelectedItems.Count)
        </MudButton>
    }
    else
    {
        <MudText Color="Color.Secondary">No group meals available.</MudText>
    }
</MudPaper>

@code {
    [Parameter] public List<GroupFoodItem> GroupItems { get; set; } = new();
    [Parameter] public EventCallback<List<GroupFoodItemEntry>> OnMealsAdded { get; set; }

    private HashSet<GroupFoodItemEntry> SelectedItems { get; set; } = new();

    private bool IsSelected(GroupFoodItemEntry entry) => SelectedItems.Contains(entry);

    private void ToggleSelection(GroupFoodItemEntry entry, bool isChecked)
    {
        if (isChecked)
            SelectedItems.Add(entry);
        else
            SelectedItems.Remove(entry);
    }

    private async Task AddSelectedItems()
    {
        await OnMealsAdded.InvokeAsync(SelectedItems.ToList());
        SelectedItems.Clear();
    }
}
