@using BulkCarnageIQ.Core.Carnage
@using BulkCarnageIQ.Core.Carnage.Report

@if (DailyMacros != null)
{
    <MudGrid GutterSize="3">
        @foreach (var macro in GetMacros())
        {
            <MudItem xs="12" sm="6" lg="3">
                <MudPaper Class="p-4 rounded-xl shadow-md">
                    <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Baseline" Class="mb-1">
                        <MudText Typo="Typo.subtitle1">@macro.Name</MudText>
                        <MudText Typo="Typo.subtitle1">@macro.Current.ToString("N2") g / @macro.Goal.ToString("N2") g</MudText>
                    </MudStack>

                    <MudProgressLinear Value="@GetBarWidth(macro.Current, macro.Goal)"
                                       Color="@GetBarColor(macro.Current, macro.Goal)"
                                       Height="6"
                                       Class="mt-2 rounded" />

                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="mt-1 text-muted">
                        @GetStatus(macro.Current, macro.Goal)
                    </MudText>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter] public MacroSummary? DailyMacros { get; set; }
    [Parameter] public UserProfile? UserProfile { get; set; }

    // Method to return the macro values
    private IEnumerable<(string Name, float Current, float Goal)> GetMacros()
    {
        if (DailyMacros == null || UserProfile == null) return [];

        float SafeGoal(float? value, float fallback) =>
            (value.HasValue && value.Value > 0) ? value.Value : fallback;

        return new[]
        {
            ("Protein", DailyMacros.Protein, SafeGoal(UserProfile.ProteinGoal, 120f)),
            ("Carbs", DailyMacros.Carbs, SafeGoal(UserProfile.CarbsGoal, 220f)),
            ("Fats", DailyMacros.Fats, SafeGoal(UserProfile.FatGoal, 80f)),
            ("Fiber", DailyMacros.Fiber, SafeGoal(UserProfile.FiberGoal, 25f))
        };
    }

    private string GetStatus(float current, float goal)
    {
        var ratio = current / goal;
        if (ratio > 1.0) return $"🔴 Over Limit by {current - goal:F1}g";
        if (ratio >= 0.85) return "🟡 Getting Close";
        return "🟢 On Track";
    }

    private Color GetBarColor(float current, float goal)
    {
        var ratio = current / goal;
        if (ratio > 1.0) return Color.Error;
        if (ratio >= 0.85) return Color.Warning;
        return Color.Success;
    }

    private double GetBarWidth(float current, float goal)
    {
        return Math.Min(current / goal * 100, 100);
    }
}
